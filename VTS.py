import tkinter as tk
from tkinter import ttk
from tkinter import PhotoImage
from tkinter import filedialog,messagebox
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.backends.backend_pdf
from matplotlib.patches import PathPatch, Circle
import numpy as np
import pandas as pd
import ttkbootstrap as tkb
from matplotlib.path import Path
from matplotlib.colors import Normalize
import matplotlib.pyplot as plt
from visualization_processor import visualize_plot
from visualization_processor import WGCNA_plot
from data_processor import transform_data, read_data, get_conversion_rules
from anndata import AnnData
import traceback

periods = []
gene_ids = []
gene_functions = []
expression_min = None
expression_max = None
data_uploaded = False
gene_expression_data = None
WGCNA_expression_data=None
Gene_metadata=None
Sample_Metadata=None

def update_globals():
    global periods, gene_ids, gene_functions, expression_min, expression_max, data_uploaded, gene_expression_data
    if gene_expression_data is not None:
        periods = gene_expression_data['Period'].unique().tolist()
        gene_ids = gene_expression_data['Gene'].unique().tolist()
        gene_functions = gene_expression_data['Functions'].unique().tolist()
        expression_min = gene_expression_data['Expression'].min()
        expression_max = gene_expression_data['Expression'].max()
        data_uploaded = True
    else:
        raise ValueError("Gene expression data not loaded.")

def Upload_Expression_Data():
    messagebox.showinfo("Welcome", "Please upload your ' WGCNA expression data '.")
    WGCNA_expression_data = None
    WGCNA_expression_file = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
    if WGCNA_expression_file:
        try:
            WGCNA_expression_data = pd.read_csv(WGCNA_expression_file,header=0,index_col=0)
            messagebox.showinfo("Upload", "expression data successfully uploaded.")
        except Exception as e:
            messagebox.showerror("Upload Error", str(e))
    return WGCNA_expression_data


def Upload_Gene_Metadata():
    messagebox.showinfo("Welcome", "Please upload your ' Gene metadata '.")
    Gene_metadata = None
    Gene_metadata_file = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
    if Gene_metadata_file:
        try:
            Gene_metadata = pd.read_csv(Gene_metadata_file,header=0)
            Gene_metadata = Gene_metadata.set_index('gene_id')
            messagebox.showinfo("Upload", "Gene metadata successfully uploaded.")
        except Exception as e:
            messagebox.showerror("Upload Error", str(e))
    return Gene_metadata

def Upload_Sample_Metadata():
    messagebox.showinfo("Welcome", "Please upload your ' Sample metadata '.")
    Sample_Metadata = None
    Sample_Metadata_file = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
    if Sample_Metadata_file:
        try:
            Sample_Metadata = pd.read_csv(Sample_Metadata_file,header=0,index_col=0)
            messagebox.showinfo("Upload", "Sample metadata successfully uploaded.")
        except Exception as e:
            messagebox.showerror("Upload Error", str(e))
    return Sample_Metadata


def upload_transcriptome_data():
    global gene_expression_data
    messagebox.showinfo("Welcome", "Please click on 'Upload transcriptome data' button to upload your data.")

    gene_expression_file = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
    if gene_expression_file:
        try:
            data_a = read_data(gene_expression_file)
            gene_expression_data = transform_data(data_a, get_conversion_rules())
            update_globals() 
            messagebox.showinfo("Upload", "Interface is initializing,please wait......")
            enable_plot_buttons()  
        except Exception as e:
            messagebox.showerror("Upload Error", str(e))
    return gene_expression_data


def create_plot(plot_type):
    if gene_expression_data is None or not periods or not gene_ids or not gene_functions:
        messagebox.showerror("Error", "Please upload data before attempting to plot.")
        return
    else:
        plot_window = tk.Toplevel(root)
        plot_window.title(plot_type)
        try:
            visualize_plot(plot_type, gene_expression_data, plot_window,plot_period,plot_gene,plot_func)
        except Exception as e:
            messagebox.showerror("Visualization Error", str(e))
            plot_window.destroy()
def w_create_plot(plot_type):
    WGCNA_expression_data = Upload_Expression_Data()
    Gene_metadata = Upload_Gene_Metadata()
    Sample_Metadata = Upload_Sample_Metadata()
    if WGCNA_expression_data is None or Gene_metadata is None or Sample_Metadata is None:
        messagebox.showerror("Error", "Please upload data before attempting to plot.")
        return
    else:
        #plot_window = tk.Toplevel(root)
        #plot_window.title(plot_type)
        try:
            usr_par = save_parameters()
            pd.set_option('display.max_rows',None)
            pd.set_option('display.max_columns', None)
            Gene_metadata = Gene_metadata.reindex(WGCNA_expression_data.columns)
            WGCNA_adata = AnnData(X=WGCNA_expression_data, obs=Sample_Metadata, var=Gene_metadata)
            WGCNA_plot(WGCNA_adata,usr_par)
        except Exception as e:
            messagebox.showerror("Visualization Error", str(e))
            print("Error",e)
            traceback.print_exc()

image_paths = {
    'Germination & Establishment_phase(0-45days)': './images/surgecane1.png',
    'Tillering_phase & Canopy_development(45-120days)': './images/surgecane2.png',
    'Grand_growth & elongation_phase(120-250days)': './images/surgecane3.png',
    'Maturing & Ripening_phase(250-360days)': './images/surgecane4.png',
}

organ_coords = {
    'Germination & Establishment_phase(0-45days)': {
        'GE-primary_roots':[(2414,1992),(2407,1957),(2428,1948),(2402,1919),(2398,2001),(2394,1981),(2375,1961),(2395,1935),(2387,1935),(2383,1917),(2378,1933),(2367,1913),(2370,1899),(2359,1905),(2358,1932),(2338,1905),(2340,1924),(2360,1976),(2386,2011),(2304,2124),(2280,2125),(2268,2109),(2250,2104),(2250,2115),(2232,2104),(2211,2104),(2198,2093),(2178,2081),(2174,2073),(2164,2096),(2162,2075),(2143,2080),(2152,2068),(2134,2069),(2128,2061),(2107,2075),(2136,2124),(2147,2141),(2128,2139),(2120,2151),(2126,2167),(2179,2147),(2190,2145),(2200,2151),(2188,2157),(2207,2171),(2186,2183),(2156,2185),(2166,2204),(2142,2205),(2126,2221),(2152,2223),(2168,2219),(2180,2197),(2187,2224),(2178,2241),(2202,2241),(2159,2265),(2192,2252),(2180,2269),(2207,2259),(2194,2276),(2175,2273),(2172,2296),(2216,2284),(2202,2308),(2236,2291),(2258,2297),(2219,2317),(2231,2312),(2232,2333),(2240,2329),(2251,2317),(2250,2335),(2240,2340),(2267,2340),(2259,2356),(2236,2357),(2247,2372),(2270,2363),(2296,2349),(2279,2375),(2303,2373),(2260,2393),(2248,2412),(2279,2388),(2294,2393),(2266,2412),(2268,2435),(2302,2404),(2323,2384),(2348,2373),(2328,2400),(2343,2392),(2366,2409),(2336,2411),(2339,2432),(2318,2451),(2335,2459),(2355,2444),(2396,2397),(2387,2419),(2398,2431),(2418,2404),(2438,2420),(2416,2433),(2411,2459),(2430,2455),(2426,2467),(2448,2453),(2467,2453),(2442,2479),(2447,2493),(2479,2443),(2499,2452),(2510,2461),(2516,2484),(2512,2436),(2526,2455),(2544,2447),(2507,2427),(2508,2396),(2527,2400),(2539,2379),(2558,2381),(2551,2395),(2562,2411),(2579,2439),(2576,2401),(2587,2411),(2566,2355),(2563,2332),(2575,2336),(2588,2371),(2567,2311),(2554,2304),(2542,2304),(2538,2297),(2507,2316),(2483,2328),(2476,2336),(2466,2337),(2451,2351),(2428,2371),(2443,2324),(2422,2361),(2406,2336),(2414,2308),(2354,2359),(2360,2324),(2363,2295),(2376,2317),(2367,2272),(2320,2343),(2300,2325),(2314,2304),(2294,2288),(2322,2263),(2320,2284),(2328,2245),(2282,2265),(2302,2237),(2302,2228),(2336,2223),(2291,2224),(2292,2209),(2306,2185),(2327,2181),(2252,2155)],
        'GE-bud': [(2290,2095), (2274,2091), (2250,2040),(2242,1968),(2234,1887),(2221,1817),(2269,1849),(2321,1905),(2360,1977),(2364,2033),(2346,2068)],
        'GE-tillers':[(3428,2122),(3408,2113),(3364,2105),(3303,2083),(3264,2043),(3244,1995),(3232,1917),(3232,1821),(3223,1805),(3232,1789),(3251,1788),(3279,1800),(3285,1810),(3279,1822),(3276,1928),(3292,1976),(3300,1945),(3310,1927),(3307,1975),(3313,2015),(3350,2042),(3408,2074),(3436,2082)],
        'GE-root_system':[(3412,2172),(3398,2152),(3399,2129),(3370,2084),(3356,2084),(3358,2093),(3375,2097),(3344,2122),(3319,2104),(3310,2126),(3299,2122),(3319,2134),(3288,2140),(3372,2186),(3312,2182),(3292,2161),(3271,2146),(3270,2152),(3260,2152),(3291,2188),(3302,2196),(3307,2212),(3288,2201),(3239,2196),(3250,2204),(3287,2225),(3235,2209),(3232,2233),(3299,2249),(3244,2244),(3224,2270),(3246,2280),(3283,2294),(3223,2298),(3259,2322),(3279,2338),(3222,2322),(3258,2361),(3194,2365),(3208,2392),(3270,2381),(3246,2392),(3216,2408),(3244,2405),(3194,2458),(3150,2498),(3191,2472),(3150,2521),(3172,2516),(3200,2481),(3219,2457),(3244,2446),(3194,2524),(3276,2434),(3275,2458),(3242,2476),(3214,2510),(3211,2537),(3210,2553),(3236,2521),(3230,2558),(3262,2498),(3307,2469),(3291,2500),(3248,2538),(3262,2545),(3279,2552),(3299,2512),(3287,2545),(3323,2494),(3324,2530),(3290,2601),(3318,2565),(3334,2552),(3335,2536),(3346,2513),(3347,2538),(3331,2582),(3320,2617),(3371,2505),(3335,2625),(3370,2552),(3380,2601),(3402,2546),(3431,2506),(3430,2540),(3410,2585),(3410,2660),(3426,2602),(3443,2661),(3446,2625),(3446,2562),(3462,2542),(3451,2592),(3482,2562),(3459,2628),(3467,2665),(3486,2630),(3506,2553),(3519,2556),(3488,2646),(3518,2589),(3523,2656),(3524,2580),(3531,2548),(3536,2624),(3556,2684),(3540,2560),(3556,2521),(3559,2542),(3550,2558),(3560,2577),(3558,2609),(3575,2653),(3576,2594),(3592,2657),(3582,2561),(3596,2574),(3592,2604),(3639,2650),(3590,2484),(3606,2505),(3620,2568),(3620,2529),(3646,2574),(3642,2609),(3654,2646),(3664,2612),(3684,2597),(3706,2628),(3663,2560),(3656,2532),(3662,2516),(3686,2576),(3691,2536),(3726,2592),(3671,2484),(3722,2537),(3744,2569),(3763,2569),(3760,2557),(3712,2502),(3748,2524),(3723,2450),(3764,2516),(3762,2473),(3790,2525),(3808,2510),(3751,2429),(3811,2488),(3819,2453),(3758,2410),(3779,2389),(3780,2417),(3795,2402),(3774,2369),(3724,2342),(3774,2354),(3791,2314),(3775,2302),(3778,2288),(3738,2290),(3750,2281),(3715,2260),(3732,2244),(3776,2248),(3735,2233),(3684,2234),(3704,2224),(3731,2201),(3723,2197),(3674,2192),(3700,2185),(3659,2186),(3674,2166),(3656,2169),(3636,2210),(3644,2224),(3654,2256),(3656,2270),(3654,2293),(3651,2309),(3650,2321),(3638,2352),(3616,2390),(3602,2394),(3579,2409),(3562,2414),(3546,2417),(3532,2414),(3515,2410),(3490,2406),(3462,2408),(3419,2400),(3388,2321),(3388,2310),(3384,2284),(3390,2246),(3374,2224),(3395,2209),(3398,2180)],
        'GE-leaf_blades':[[(3430,2191),(3435,1983),(3414,1944),(3401,1839),(3395,1726),(3411,1667),(3438,1626),(3433,1706),(3437,1810),(3470,1942),(3482,2034),(3481,2067),(3495,2162),(3503,1980),(3497,1860),(3487,1707),(3493,1611),(3526,1566),(3565,1546),(3593,1536),(3553,1591),(3539,1635),(3539,1751),(3557,1859),(3575,1998),(3583,1982),(3589,1874),(3602,1751),(3601,1707),(3577,1650),(3625,1688),(3639,1730),(3639,1896),(3626,2087),(3626,2196),(3593,2166),(3529,2156),(3477,2164)],
                       [(3634,1383),(3693,1316),(3771,1244),(3846,1190),(3891,1183),(3917,1198),(3907,1168),(3857,1158),(3789,1180),(3718,1238),(3687,1278),(3703,1139),(3718,975),(3731,848),(3766,674),(3721,786),(3687,939),(3683,995),(3646,862),(3613,774),(3590,752),(3574,799),(3614,911),(3643,1034),(3653,1151),(3663,1228),(3657,1290)],
                       [(3389,1345),(3350,1290),(3298,1237),(3254,1209),(3211,1190),(3258,1180),(3303,1194),(3343,1225),(3386,1290),(3379,1210),(3362,1116),(3359,1085),(3319,1054),(3281,1014),(3253,1014),(3225,1030),(3202,1066),(3167,1090),(3118,1117),(3125,1168),(3098,1144),(3101,1101),(3131,1064),(3155,1026),(3194,1013),(3245,989),(3306,997),(3349,1009),(3339,829),(3359,680),(3371,628),(3407,576),(3425,548),(3445,546),(3418,613),(3401,682),(3387,753),(3387,963),(3386,1034),(3402,1054),(3441,1065),(3466,1094),(3483,1136),(3503,1164),(3494,1230),(3489,1208),(3467,1197),(3393,1117),(3394,1185),(3413,1296),(3419,1346)],
                       [(3495,839),(3483,690),(3463,535),(3447,399),(3419,284),(3397,205),(3390,168),(3357,117),(3419,132),(3447,155),(3473,200),(3503,299),(3518,385),(3534,249),(3562,168),(3583,128),(3591,115),(3607,115),(3561,189),(3549,252),(3529,383),(3541,479),(3545,591),(3521,752),(3565,617),(3621,491),(3703,340),(3790,244),(3874,161),(3942,121),(4027,105),(4087,117),(4122,145),(4039,143),(3995,143),(3934,161),(3857,267),(3706,501),(3641,627),(3590,754),(3558,846)]
                    ],
        'GE-stem':[[(3407,1671),(3435,1630),(3429,1426),(3419,1349),(3391,1351),(3395,1489)],
                [(3497,1610),(3521,1574),(3546,1557),(3539,1526),(3542,1334),(3531,1131),(3533,1005),(3554,863),(3494,859),(3505,993),(3502,1125),(3497,1223),(3487,1213),(3479,1339),(3478,1428),(3498,1575)],
                [(3635,1712),(3599,1660),(3599,1629),(3613,1496),(3638,1380),(3687,1324),(3666,1475),(3646,1595)]
        ]
    },
    'Tillering_phase & Canopy_development(45-120days)': {
        'TC-leaf':[[(2294,1994),(2270,1972),(2266,1945),(2241,1923),(2195,1909),(2150,1919),(2100,1943),(2080,1976),(2080,2001),(2089,2009),(2094,1990),(2131,1972),(2171,1960),(2210,1962),(2246,1977),(2276,2011),(2274,2128),(2275,2181),(2261,2134),(2243,2113),(2247,2141),(2247,2170),(2274,2277),(2277,2456),(2324,2452),(2321,2362),(2321,2264),(2321,2197),(2353,2123),(2323,2166),(2317,2103),(2315,1999),(2332,1913),(2340,1880),(2371,1831),(2414,1790),(2492,1751),(2540,1744),(2584,1747),(2543,1720),(2510,1712),(2468,1712),(2419,1726),(2371,1766),(2328,1835),(2303,1898),(2294,1948)],
                [(2264,1801),(2283,1746),(2324,1670),(2376,1602),(2419,1556),(2486,1527),(2575,1511),(2667,1509),(2745,1522),(2817,1543),(2857,1569),(2823,1532),(2770,1496),(2710,1477),(2653,1469),(2595,1474),(2543,1488),(2503,1501),(2458,1526),(2421,1553),(2381,1577),(2326,1629),(2290,1688),(2263,1755),(2246,1704),(2208,1645),(2160,1610),(2113,1591),(2062,1588),(2026,1599),(1989,1603),(1954,1623),(1931,1663),(1933,1707),(1948,1666),(1985,1625),(2025,1597),(2066,1603),(2114,1617),(2183,1659),(2230,1715),(2258,1766)],
                [(2256,1578),(2185,1524),(2105,1487),(1983,1470),(1875,1470),(1837,1482),(1789,1530),(1751,1601),(1736,1675),(1745,1735),(1711,1693),(1705,1633),(1712,1578),(1751,1521),(1837,1478),(1897,1441),(1968,1422),(2043,1417),(2143,1429),(2224,1461),(2319,1533)],
                [(2314,1416),(2382,1320),(2516,1208),(2630,1210),(2762,1220),(2912,1264),(3028,1328),(3108,1406),(3080,1316),(2978,1212),(2894,1172),(2782,1144),(2670,1154),(2534,1202),(2446,1226),(2318,1288),(2270,1342),(2252,1382)],
                [(2232,1162),(2180,1028),(2076,902),(1934,784),(1800,714),(1658,668),(1556,652),(1642,626),(1754,618),(1942,654),(2052,712),(2150,810),(2198,914),(2236,1054),(2234,880),(2218,782),(2152,626),(2066,474),(1960,286),(1850,166),(1772,104),(1710,88),(1728,70),(1830,60),(1906,88),(1988,172),(2088,324),(2170,488),(2232,654),(2290,866),(2270,590),(2268,392),(2296,256),(2368,150),(2468,78),(2614,26),(2518,96),(2460,136),(2366,270),(2324,424),(2324,676),(2326,868),(2356,756),(2432,628),(2528,514),(2662,428),(2824,390),(2976,402),(3098,466),(2958,466),(2820,478),(2684,514),(2560,588),(2458,678),(2374,806),(2340,870),(2326,868),(2286,868),(2230,882),(2238,1058)]
                ],
        'TC-stem':[[(2232,867),(2288,859),(2328,860),(2345,860),(2332,897),(2322,1009),(2317,1147),(2321,1239),(2317,1295),(2266,1353),(2249,1386),(2312,1421),(2320,1537),(2322,1635),(2288,1691),(2262,1758),(2255,1582),(2275,1559),(2319,1537),(2277,1495),(2244,1476),(2240,1317),(2236,1172),(2234,1044)],
                [(2264,1801),(2289,1732),(2323,1670),(2329,1830),(2307,1889),(2295,1958),(2293,2003),(2270,1970),(2264,1891)]

        ],
        'TC-root':[(2285,2455),(2260,2461),(2213,2442),(2161,2451),(2125,2444),(2091,2439),(2125,2444),(2085,2468),(2126,2445),(2162,2451),(2135,2464),(2103,2487),(2081,2490),(2043,2494),(2081,2492),(2050,2518),(1981,2525),(2054,2517),(2124,2494),(2027,2533),(2137,2511),(2121,2525),(2074,2535),(2040,2556),(2107,2549),(2072,2561),(2068,2587),(2190,2503),(2169,2534),(2117,2562),(2087,2586),(2068,2604),(2089,2587),(2119,2564),(2171,2536),(2190,2503),(2236,2500),(2191,2530),(2174,2567),(2155,2608),(2132,2638),(2156,2606),(2149,2637),(2153,2680),(2150,2637),(2157,2610),(2173,2567),(2191,2532),(2212,2541),(2242,2527),(2210,2556),(2194,2607),(2185,2694),(2198,2641),(2205,2667),(2186,2746),(2207,2666),(2199,2646),(2194,2607),(2221,2592),(2235,2602),(2220,2629),(2218,2675),(2228,2686),(2225,2743),(2229,2651),(2243,2678),(2230,2651),(2222,2626),(2236,2601),(2251,2545),(2256,2575),(2245,2627),(2253,2686),(2241,2715),(2232,2740),(2244,2713),(2254,2683),(2258,2722),(2255,2678),(2247,2633),(2257,2580),(2266,2546),(2282,2576),(2271,2610),(2269,2627),(2272,2608),(2282,2642),(2271,2674),(2277,2730),(2283,2628),(2296,2675),(2287,2715),(2291,2745),(2287,2705),(2296,2668),(2284,2618),(2289,2492),(2307,2490),(2303,2511),(2306,2569),(2317,2596),(2317,2617),(2333,2642),(2325,2678),(2345,2663),(2345,2686),(2338,2707),(2339,2745),(2340,2699),(2344,2671),(2361,2666),(2382,2740),(2395,2730),(2390,2679),(2393,2651),(2362,2619),(2356,2575),(2327,2547),(2317,2517),(2323,2486),(2333,2533),(2364,2540),(2372,2584),(2369,2565),(2387,2583),(2389,2618),(2464,2649),(2401,2576),(2394,2548),(2362,2524),(2365,2479),(2377,2478),(2387,2524),(2415,2541),(2429,2603),(2456,2580),(2445,2543),(2434,2525),(2453,2532),(2468,2554),(2486,2570),(2428,2502),(2471,2515),(2497,2546),(2532,2585),(2507,2554),(2483,2526),(2519,2531),(2546,2548),(2564,2555),(2577,2542),(2514,2492),(2477,2496),(2406,2470),(2388,2467),(2374,2454),(2327,2452),(2297,2459)]
    },
    'Grand_growth & elongation_phase(120-250days)':{
        'Ge-root':[(2293,2277),(2243,2304),(2235,2321),(2207,2329),(2181,2330),(2208,2331),(2199,2341),(2182,2368),(2200,2341),(2190,2388),(2202,2365),(2165,2474),(2194,2425),(2180,2459),(2193,2426),(2191,2469),(2194,2426),(2208,2465),(2192,2427),(2202,2365),(2228,2336),(2220,2365),(2234,2355),(2232,2369),(2210,2407),(2216,2396),(2218,2434),(2216,2474),(2218,2433),(2230,2391),(2239,2461),(2236,2447),(2214,2536),(2203,2581),(2215,2536),(2199,2553),(2214,2534),(2223,2571),(2215,2532),(2220,2508),(2235,2540),(2223,2499),(2238,2438),(2264,2328),(2291,2321),(2278,2348),(2258,2427),(2292,2378),(2229,2488),(2272,2417),(2281,2432),(2245,2494),(2290,2412),(2292,2447),(2249,2522),(2293,2448),(2293,2500),(2292,2399),(2305,2369),(2325,2392),(2326,2412),(2305,2455),(2325,2410),(2326,2481),(2327,2440),(2304,2514),(2308,2499),(2361,2651),(2329,2563),(2318,2605),(2329,2563),(2336,2587),(2364,2579),(2351,2583),(2358,2632),(2354,2583),(2336,2588),(2308,2499),(2344,2384),(2349,2480),(2348,2508),(2363,2556),(2365,2526),(2348,2488),(2350,2470),(2382,2528),(2368,2501),(2350,2389),(2352,2368),(2359,2349),(2387,2404),(2381,2508),(2387,2447),(2408,2491),(2394,2509),(2397,2569),(2413,2533),(2410,2503),(2456,2564),(2408,2449),(2411,2408),(2424,2447),(2423,2367),(2450,2491),(2431,2399),(2491,2539),(2420,2360),(2415,2339),(2357,2286),(2349,2276),(2356,2338),(2338,2284),(2331,2276)],
        'Ge-stem':[[(2291,2276),(2294,2200),(2288,2191),(2293,2117),(2284,2104),(2285,1984),(2284,1971),(2299,1864),(2291,1825),(2290,1809),(2303,1769),(2301,1699),(2316,1644),(2320,1483),(2374,1478),(2372,1684),(2376,1811),(2383,1820),(2372,1828),(2364,1965),(2361,1984),(2360,2104),(2361,2113),(2355,2147),(2355,2183),(2354,2196),(2351,2212),(2352,2277)],
                [(2316,1483),(2346,1446),(2363,1413),(2362,1249),(2363,1147),(2316,1151),(2321,1267),(2310,1298)],
                [(2316,1149),(2349,1103),(2352,1053),(2372,956),(2319,962),(2319,1044),(2312,1073)]],
        'Ge-leaf':[[(2302,1700),(2247,1624),(2163,1531),(2072,1439),(1994,1370),(1903,1314),(1807,1272),(1692,1243),(1606,1231),(1572,1234),(1547,1242),(1578,1218),(1620,1206),(1691,1200),(1756,1214),(1883,1270),(1988,1342),(2078,1410),(2222,1540),(2318,1648)],
                [(2376,1481),(2420,1390),(2470,1280),(2508,1172),(2554,1092),(2616,1012),(2715,937),(2865,879),(2963,861),(3065,867),(3131,897),(3161,1017),(3191,1081),(3179,981),(3177,867),(3139,843),(3021,821),(2897,815),(2789,841),(2689,893),(2613,963),(2535,1069),(2463,1209),(2411,1331),(2321,1487)],
                [(2310,1304),(2240,1214),(2116,1096),(1992,984),(1860,890),(1764,836),(1678,820),(1596,826),(1536,848),(1504,882),(1526,836),(1608,796),(1688,778),(1780,800),(1886,844),(2024,944),(2142,1046),(2266,1182),(2322,1262)],
                [(2360,1148),(2416,1054),(2502,944),(2614,816),(2730,728),(2876,674),(2988,662),(3088,682),(3172,726),(3092,672),(3014,636),(2896,630),(2738,686),(2630,762),(2538,862),(2452,964),(2314,1150)],
                [(2314,1070),(2244,954),(2124,802),(1998,684),(1898,598),(1804,554),(1728,534),(1692,530),(1650,536),(1690,506),(1760,498),(1856,528),(1938,586),(1996,654),(2152,806),(2266,960),(2320,1044),(2314,794),(2318,462),(2330,136),(2328,218),(2352,342),(2362,470),(2342,628),(2338,824),(2334,914),(2362,830),(2414,636),(2472,512),(2552,434),(2632,400),(2708,394),(2774,414),(2802,464),(2792,518),(2752,572),(2778,506),(2778,472),(2744,434),(2696,414),(2612,422),(2544,462),(2490,524),(2444,616),(2404,766),(2372,964),(2342,1110),(2416,1010),(2562,836),(2646,752),(2760,680),(2880,640),(2986,630),(3088,664),(3164,722),(3110,690),(3030,672),(2942,666),(2816,688),(2684,758),(2588,842),(2468,982),(2364,1134),(2318,1146)]]
    },
    'Maturing & Ripening_phase(250-360days)':{
        'MP-root':[[(2158,2282),(2126,2281),(2114,2290),(2064,2285),(2042,2277),(2015,2290),(1986,2291),(1930,2275),(1911,2298),(1967,2295),(1956,2306),(1992,2305),(1995,2313),(2014,2313),(1951,2341),(2010,2326),(2034,2334),(2006,2337),(1996,2351),(1976,2357),(2006,2355),(2027,2346),(2023,2370),(2044,2367),(1986,2405),(2060,2370),(2079,2374),(2056,2403),(2039,2401),(2040,2409),(2078,2390),(2123,2375),(2070,2409),(2107,2391),(2072,2423),(2092,2407),(2079,2435),(2054,2450),(2055,2473),(2084,2445),(2095,2414),(2104,2429),(2126,2402),(2127,2437),(2155,2355),(2146,2421),(2152,2434),(2138,2458),(2144,2489),(2131,2491),(2130,2522),(2140,2507),(2146,2525),(2124,2545),(2130,2562),(2111,2585),(2127,2607),(2112,2611),(2106,2626),(2108,2645),(2099,2669),(2095,2711),(2091,2689),(2114,2662),(2096,2643),(2122,2621),(2123,2579),(2132,2555),(2136,2529),(2135,2503),(2146,2477),(2150,2450),(2162,2433),(2163,2469),(2162,2451),(2176,2390),(2190,2417),(2190,2439),(2182,2494),(2200,2447),(2208,2466),(2204,2489),(2200,2509),(2206,2545),(2206,2577),(2212,2607),(2208,2631),(2210,2653),(2223,2678),(2216,2707),(2223,2729),(2216,2749),(2223,2782),(2227,2770),(2218,2738),(2212,2725),(2228,2698),(2212,2687),(2219,2662),(2219,2623),(2208,2590),(2212,2553),(2206,2521),(2203,2498),(2199,2471),(2202,2431),(2203,2407),(2216,2423),(2220,2450),(2220,2470),(2230,2434),(2238,2450),(2243,2470),(2231,2481),(2231,2511),(2238,2494),(2246,2482),(2254,2509),(2255,2538),(2246,2565),(2263,2594),(2251,2609),(2262,2639),(2270,2663),(2259,2687),(2270,2703),(2276,2742),(2267,2757),(2280,2775),(2263,2726),(2264,2678),(2255,2647),(2264,2613),(2252,2577),(2264,2530),(2248,2501),(2252,2454),(2252,2437),(2248,2419),(2251,2406),(2268,2427),(2282,2438),(2247,2371),(2266,2383),(2276,2409),(2286,2421),(2292,2397),(2263,2359),(2327,2431),(2332,2411),(2323,2391),(2322,2378),(2342,2390),(2339,2369),(2359,2409),(2366,2405),(2360,2359),(2411,2387),(2376,2347),(2387,2338),(2411,2353),(2423,2365),(2427,2345),(2440,2362),(2466,2369),(2460,2350),(2404,2298),(2426,2309),(2438,2291),(2463,2311),(2475,2291),(2494,2285),(2516,2295),(2495,2293),(2507,2299),(2468,2293),(2427,2294),(2352,2301),(2371,2286),(2383,2277),(2320,2290),(2219,2290),(2208,2294),(2199,2291),(2187,2290)],
                [(2811,2365),(2774,2389),(2743,2431),(2735,2469),(2755,2430),(2770,2409),(2823,2366),(2828,2374),(2796,2421),(2766,2467),(2818,2417),(2830,2381),(2834,2393),(2799,2445),(2779,2482),(2839,2403),(2839,2374),(2839,2354),(2848,2373),(2850,2391),(2886,2355),(2848,2406),(2818,2453),(2786,2509),(2747,2587),(2739,2617),(2806,2506),(2846,2434),(2891,2366),(2890,2390),(2868,2415),(2818,2510),(2816,2551),(2859,2467),(2890,2406),(2888,2494),(2898,2594),(2898,2623),(2904,2546),(2900,2489),(2898,2421),(2916,2434),(2922,2446),(2911,2506),(2910,2557),(2920,2607),(2919,2549),(2920,2483),(2927,2457),(2931,2437),(2947,2439),(2939,2507),(2934,2550),(2940,2578),(2943,2521),(2951,2470),(2970,2515),(2955,2563),(2954,2589),(2946,2613),(2935,2674),(2931,2634),(2954,2619),(2959,2605),(2992,2682),(3020,2714),(3048,2734),(3004,2677),(2978,2609),(2975,2550),(3054,2679),(3090,2734),(3138,2757),(3076,2694),(3038,2631),(2991,2570),(2978,2535),(2992,2477),(3026,2607),(3004,2519),(2994,2465),(2996,2447),(3014,2471),(3014,2519),(3035,2573),(3052,2646),(3072,2657),(3043,2586),(3046,2557),(3079,2647),(3100,2667),(3063,2594),(3038,2507),(3071,2569),(3106,2617),(3147,2658),(3090,2579),(3107,2549),(3100,2518),(3090,2502),(3022,2426),(3002,2415),(3014,2399),(3067,2459),(3106,2502),(3146,2539),(3100,2458),(3135,2497),(3171,2563),(3154,2491),(3112,2422),(3140,2421),(3179,2487),(3186,2535),(3195,2555),(3210,2610),(3216,2597),(3227,2609),(3212,2553),(3187,2513),(3192,2487),(3195,2450),(3222,2486),(3231,2502),(3252,2485),(3254,2549),(3274,2546),(3272,2498),(3212,2442),(3170,2391),(3170,2370),(3148,2346),(3190,2373),(3186,2351),(3163,2334),(3207,2338),(3194,2323),(3172,2317),(3206,2307),(3184,2303),(3170,2283),(3148,2305),(3116,2295),(3119,2271),(3138,2275),(3138,2257),(3128,2251),(3115,2254),(3099,2285),(3074,2302),(3044,2322),(3019,2341),(2999,2351),(3022,2355),(3042,2345),(3063,2350),(3100,2374),(3115,2399),(3076,2346),(3106,2357),(3138,2383),(3146,2406),(3130,2426),(3083,2425),(3050,2418),(3039,2399),(3012,2383),(3008,2401),(2991,2414),(2984,2435),(2960,2430),(2935,2435),(2907,2430),(2894,2413),(2898,2378),(2888,2363),(2875,2365),(2858,2355),(2836,2362)]
        ],
        'MP-stem':[[(2160,2281),(2171,2211),(2166,2177),(2157,2169),(2149,2114),(2143,2077),(2134,2069),(2140,2013),(2130,1960),(2121,1954),(2130,1910),(2123,1829),(2124,1820),(2121,1685),(2117,1677),(2126,1665),(2135,1562),(2130,1550),(2135,1541),(2132,1521),(2145,1441),(2136,1362),(2138,1350),(2138,1254),(2190,1252),(2180,1267),(2181,1347),(2184,1446),(2174,1563),(2166,1671),(2175,1679),(2168,1685),(2169,1817),(2177,1817),(2171,1831),(2186,1953),(2186,2007),(2196,2057),(2221,2143),(2222,2165),(2213,2284)],
                [(2137,1259),(2188,1177),(2188,1089),(2147,1063)],
                [(2148,1061),(2191,991),(2193,974),(2144,981)],
                [(2148,824),(2151,917),(2192,968),(2194,836)],
                [(1573,2058),(1573,2012),(1559,1946),(1563,1882),(1585,1858),(1587,1836),(1572,1810),(1577,1779),(1580,1658),(1585,1592),(1591,1467),(1607,1443),(1592,1423),(1605,1348),(1645,1330),(1688,1339),(1712,1363),(1711,1407),(1693,1450),(1695,1459),(1688,1558),(1697,1662),(1684,1767),(1687,1823),(1688,1843),(1681,1862),(1685,1900),(1692,2011),(1687,2060),(1643,2051),(1605,2047)],
                [(2856,2021),(2868,2066),(2874,2118),(2880,2179),(2872,2189),(2880,2201),(2873,2243),(2873,2302),(2878,2337),(2917,2335),(2942,2334),(2960,2323),(2964,2301),(2964,2267),(2961,2234),(2956,2189),(2948,2151),(2945,2085),(2938,2035),(2938,2007),(2908,2018)]
                ],
        'MP-leaf':[[(2185,1455),(2371,1209),(2698,891),(2884,744),(3031,705),(3157,693),(3040,687),(2935,693),(3064,609),(3169,549),(3025,588),(2827,696),(2767,747),(2662,789),(2548,867),(2410,996),(2230,1185),(2188,1254),(2137,1257),(2227,1125),(2368,978),(2524,873),(2686,813),(2437,1035),(2284,1224),(2182,1353)],
                [(2191,1095),(2266,966),(2470,768),(2665,651),(2872,552),(3028,510),(3220,495),(3091,483),(2887,504),(2653,594),(2464,711),(2278,882),(2143,1056)],
                [(2139,1359),(2073,1257),(1993,1159),(1901,1089),(1809,1041),(1727,1057),(1619,1141),(1505,1265),(1423,1373),(1365,1475),(1327,1595),(1405,1461),(1531,1303),(1689,1141),(1797,1043),(1845,1037),(1893,1049),(1973,1097),(2067,1195),(2141,1305)],
                [(2139,1173),(2011,1045),(1857,913),(1763,865),(1697,851),(1631,851),(1527,885),(1409,965),(1353,1015),(1265,1113),(1389,1009),(1507,933),(1653,875),(1745,861),(1833,869),(1965,929),(2091,1037),(2145,1115)],
                [(2142,976),(2132,946),(2056,906),(1910,788),(1734,626),(1648,556),(1562,504),(1450,466),(1372,446),(1304,444),(1224,448),(1324,486),(1522,562),(1720,626),(1816,646),(1928,702),(2046,806),(2134,914),(2150,918),(2194,970)],
                [(2148,816),(2074,678),(1988,536),(1886,396),(1832,334),(1756,252),(1818,286),(1920,376),(2024,510),(2090,626),(2186,824)],
                [(2180,680),(2194,654),(2202,594),(2196,556),(2184,544),(2182,594),(2174,640)]
                ],
        'MP-bud':[[(1564,1874),(1546,1830),(1574,1736),(1576,1772),(1570,1802),(1584,1836),(1584,1862)],
               [(1690,2016),(1702,1980),(1714,1964),(1718,1992),(1718,2024),(1706,2048),(1692,2034)],
               [(2126,1840),(2102,1824),(2098,1784),(2106,1760),(2122,1804)],
               [(2188,1958),(2198,1928),(2196,1908),(2182,1932)],
               [(1696,1660),(1720,1618),(1714,1588),(1694,1614)]
               ],
        'MP-flower':[(2148,741),(2151,604),(2142,565),(2100,465),(2047,445),(2019,435),(2007,432),(1915,400),(1896,393),(1846,379),(1899,385),(1927,389),(1994,409),(1999,412),(2030,428),(2096,456),(2020,413),(2000,397),(1975,385),(1964,380),(1938,364),(1915,344),(1895,332),(1867,312),(1860,292),(1891,307),(1919,336),(2002,391),(1944,339),(1923,323),(1938,325),(2007,389),(1950,303),(1923,269),(1928,249),(1950,264),(1952,281),(1967,301),(1975,323),(1988,339),(1990,351),(2026,376),(2022,393),(2047,405),(2098,448),(2090,411),(2054,389),(2048,375),(2015,331),(1999,309),(1974,275),(1968,245),(1984,260),(2004,287),(2020,313),(2039,333),(2062,363),(2084,393),(2076,339),(2047,324),(2039,291),(2018,269),(1999,231),(1990,211),(1982,177),(2002,201),(2018,229),(2038,272),(2011,171),(2027,180),(2038,217),(2042,237),(2048,283),(2055,284),(2052,239),(2042,191),(2046,181),(2058,187),(2067,212),(2062,244),(2070,297),(2078,319),(2078,261),(2071,224),(2082,201),(2092,296),(2092,315),(2088,349),(2115,449),(2112,364),(2108,316),(2111,256),(2116,220),(2063,173),(2050,144),(2030,107),(2008,53),(2015,17),(2032,48),(2042,80),(2052,105),(2074,167),(2051,81),(2043,40),(2052,13),(2063,40),(2067,85),(2072,129),(2091,173),(2112,204),(2100,167),(2096,135),(2087,105),(2082,75),(2076,45),(2078,12),(2092,7),(2110,152),(2118,171),(2119,144),(2112,108),(2116,79),(2114,65),(2100,25),(2119,44),(2115,31),(2119,15),(2124,76),(2124,223),(2140,235),(2148,111),(2147,55),(2138,15),(2155,41),(2178,1),(2154,69),(2150,143),(2175,57),(2190,16),(2187,73),(2176,111),(2158,153),(2148,175),(2164,160),(2159,184),(2140,199),(2150,233),(2166,196),(2176,160),(2188,113),(2194,83),(2204,45),(2214,12),(2216,57),(2214,79),(2203,128),(2204,148),(2192,185),(2176,224),(2168,244),(2151,249),(2151,312),(2175,273),(2203,229),(2204,187),(2208,171),(2216,137),(2224,112),(2228,147),(2227,168),(2216,203),(2212,223),(2242,188),(2239,156),(2248,140),(2256,121),(2235,64),(2234,27),(2236,15),(2244,15),(2252,57),(2248,85),(2262,111),(2272,53),(2276,16),(2283,64),(2296,39),(2316,8),(2315,29),(2308,51),(2286,81),(2248,164),(2260,159),(2286,113),(2310,80),(2334,15),(2344,28),(2332,47),(2326,76),(2314,109),(2286,145),(2260,176),(2230,205),(2191,247),(2164,291),(2150,369),(2152,389),(2194,303),(2204,252),(2230,223),(2228,257),(2215,293),(2247,257),(2246,217),(2254,197),(2259,241),(2278,228),(2279,196),(2298,152),(2322,115),(2322,152),(2304,175),(2290,211),(2316,179),(2334,164),(2340,107),(2350,79),(2374,41),(2344,157),(2360,133),(2378,96),(2386,64),(2400,56),(2398,88),(2354,156),(2323,196),(2376,148),(2414,121),(2428,100),(2438,115),(2412,144),(2388,157),(2363,181),(2332,196),(2299,227),(2262,251),(2235,301),(2235,337),(2219,359),(2204,379),(2196,411),(2182,432),(2171,476),(2152,501),(2155,527),(2191,480),(2206,413),(2223,372),(2212,475),(2223,433),(2234,396),(2252,379),(2240,425),(2222,465),(2254,435),(2255,356),(2268,323),(2286,283),(2299,253),(2316,253),(2302,288),(2283,311),(2275,339),(2264,373),(2276,363),(2298,335),(2308,311),(2324,285),(2336,287),(2332,311),(2306,347),(2266,393),(2267,423),(2319,353),(2332,308),(2342,268),(2342,251),(2352,191),(2352,268),(2362,216),(2388,169),(2403,169),(2398,196),(2382,211),(2348,289),(2366,269),(2399,217),(2416,187),(2455,152),(2494,117),(2500,135),(2463,164),(2432,201),(2396,240),(2344,315),(2331,357),(2383,297),(2396,247),(2414,219),(2415,232),(2403,271),(2432,227),(2454,207),(2488,148),(2487,185),(2442,231),(2478,201),(2482,220),(2427,281),(2382,321),(2364,353),(2324,381),(2304,411),(2298,399),(2243,461),(2155,553),(2163,568),(2171,648),(2194,735),(2199,804),(2191,840)],
        'MP-tillers':[[(2785,2210),(2787,2109),(2786,2063),(2800,2054),(2810,2066),(2822,2079),(2816,2101),(2820,2146),(2827,2206),(2829,2320),(2805,2285),(2788,2239)],
                   [(3013,2162),(3052,2057),(3047,2049),(3054,2042),(3076,2029),(3088,2038),(3077,2051),(3067,2142),(3021,2198)]
                   ],
        'MP-leaf_sheath':[(3077,1545),(3057,1568),(2998,1574),(2947,1572),(2910,1564),(2898,1545),(2893,1452),(2903,1288),(2910,1108),(2905,1020),(2859,928),(2846,878),(2839,806),(2866,816),(2910,810),(2950,821),(2973,820),(2997,809),(3043,805),(3055,822),(3105,813),(3126,825),(3123,866),(3101,924),(3086,945),(3073,1034),(3059,1126),(3055,1232),(3058,1393),(3069,1513)]
    }}

root = tkb.Window(themename="flatly")
root.title('VTS')
#root.iconbitmap('./resources/icon.ico')
root.state('zoomed')

style = tkb.Style()
style.configure('TButton', padding=5)
style.configure('LightBlue.TButton', background='#ADD8E6')
style.configure('LightPink.TButton', background='#FFB6C1')
style.configure('Gradient.TButton', background='#FFFFFF', foreground='#0000FF')

search_frame = tk.Frame(root)
search_frame.pack(side=tk.TOP, fill=tk.X, padx=10, pady=20)
left_frame = tk.Frame(root, bd=2, relief=tk.GROOVE)
left_frame.pack(side=tk.LEFT, padx=10, pady=5, fill=tk.BOTH, expand=True)
left_frame.pack_propagate(False)
left_frame.config(width=1500)
right_frame = tk.Frame(root, bd=2, relief=tk.GROOVE,width=500)
right_frame.pack(side=tk.RIGHT, padx=10, pady=5, fill=tk.BOTH, expand=True)
right_frame.pack_propagate(False)
upload_buttons_frame = tk.Frame(left_frame)
upload_buttons_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=3)

upload_tdata_button = tkb.Button(upload_buttons_frame, text='Upload transcriptome data', command=upload_transcriptome_data,
                                bootstyle='secondary-outline')
upload_tdata_button.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5, pady=3, ipady=5)


plot_buttons = []
def enable_plot_buttons():
    for button in plot_buttons:
        button.configure(state=tk.NORMAL)
def add_plot_buttons():
    colors = {
        'WGCNA': 'primary',
        'Heatmap': 'secondary',
        'Bar Plot': 'success',
        'Box Plot': 'info'}
    plot_types = ['Bar Plot', 'Box Plot','Heatmap', 'WGCNA']
    for plot_type in plot_types:
        button_color = colors[plot_type]
        if plot_type == 'WGCNA':
            plot_button = tkb.Button(right_frame, text=plot_type, command=lambda pt=plot_type: w_create_plot(pt),
                                     bootstyle=(button_color + 'lg'))
        else:
            plot_button = tkb.Button(right_frame, text=plot_type, command=lambda pt=plot_type: create_plot(pt),
                                     bootstyle=(button_color, 'lg'))
        plot_button.pack(side=tk.TOP, fill=tk.X, padx=15, pady=15, ipadx=10, ipady=15)
        plot_buttons.append(plot_button)
add_plot_buttons()
w_style = tkb.Style()
w_style.configure("TLabel", font=('Helvetica', 10))
w_style.configure("TEntry", font=('Helvetica', 10), padding=5)
w_style.configure("TButton", font=('Helvetica', 10), padding=5)
wgcna_options_frame = tkb.LabelFrame(right_frame, text="WGCNA options")
wgcna_options_frame.pack(side="bottom", fill="x", expand=False, padx=10, pady=10)
parameters = {
    "Species": "sugarcane",
    "Output Path": "./WGCNA_out/",
    "TPM cutoff": 1,
    "TOM Type": "signed",
    "Network Type": "signed hybrid"
}

user_input= {}
entries = {}
def save_parameters(show_message=False):
    global user_input
    user_input.clear()
    for param, entry in entries.items():
        user_input[param] = entry.get()
    if show_message:
        messagebox.showinfo("save parameters", "{} have been uploaded successfully.".format(user_input))
    return user_input


for i, (param, value) in enumerate(parameters.items()):
    label = ttk.Label(wgcna_options_frame, text=param)
    label.grid(row=i, column=0, sticky="w", padx=5, pady=3)
    entry_var = tk.StringVar(value=value)
    entry = ttk.Entry(wgcna_options_frame, textvariable=entry_var, width=30)
    entry.grid(row=i, column=1, padx=5, pady=3)
    entries[param] = entry
save_plot_button = ttk.Button(wgcna_options_frame, text="Save & Plot", command=lambda: save_parameters(True))
save_plot_button.grid(row=len(parameters) + 2, column=0, columnspan=2, pady=10)


def start_application():
    upload_transcriptome_data()
    root.deiconify()

start_application()

def close_win():
    root.destroy()
    exit(0)
    
if data_uploaded:
    period_string_var = tk.StringVar(value=periods[0])
    period_label = tk.Label(search_frame, text='Period')
    period_label.pack(side=tk.LEFT)
    period_dropdown = ttk.Combobox(search_frame, textvariable=period_string_var, values=periods)
    period_dropdown.pack(side=tk.LEFT, fill=tk.X, padx=5, pady=2,expand=True)
    gene_id_var = tk.StringVar(value=gene_ids[0])
    gene_id_label = tk.Label(search_frame, text='Gene ID')
    gene_id_label.pack(side=tk.LEFT)
    gene_id_dropdown = ttk.Combobox(search_frame, textvariable=gene_id_var, values=gene_ids)
    gene_id_dropdown.pack(side=tk.LEFT, fill=tk.X, padx=5, pady=2,expand=True)
    gene_function_var = tk.StringVar(value=gene_functions[0])
    gene_function_label = tk.Label(search_frame, text='Gene Function')
    gene_function_label.pack(side=tk.LEFT)
    gene_function_dropdown = ttk.Combobox(search_frame, textvariable=gene_function_var, values=gene_functions)
    gene_function_dropdown.pack(side=tk.LEFT, fill=tk.X, padx=5, pady=2,expand=True)

    def update_dropdowns(selected_period=None, selected_gene_id=None,selected_function=None):
        if selected_period:
            gene_ids_period = gene_expression_data[gene_expression_data['Period'] == selected_period]['Gene'].unique().tolist()
            gene_id_dropdown['values'] = gene_ids_period
            if not selected_gene_id or selected_gene_id not in gene_ids_period:
                selected_gene_id = gene_ids_period[0] if gene_ids_period else ''
            gene_id_var.set(selected_gene_id)
        if selected_gene_id:
            functions = gene_expression_data[gene_expression_data['Gene'] == selected_gene_id]['Functions'].unique().tolist()
            gene_function_dropdown['values'] = functions
            if not selected_function or selected_function not in functions:
                selected_function = functions[0] if functions else ''
            gene_function_var.set(selected_function)
        if selected_function:
            periods_for_function = gene_expression_data[gene_expression_data['Functions'] == selected_function]['Period'].unique().tolist()
            period_dropdown['values'] = periods_for_function
            if not selected_period or selected_period not in periods_for_function:
                selected_period = periods_for_function[0] if periods_for_function else ''
            period_string_var.set(selected_period)
        return selected_period, selected_gene_id, selected_function
    def on_period_selected(event):
        update_dropdowns(selected_period=period_string_var.get())
    def on_gene_id_selected(event):
        update_dropdowns(selected_gene_id=gene_id_var.get())
    def on_function_selected(event):
        update_dropdowns(selected_function=gene_function_var.get())


    def autocomplete_combobox(combobox, values):
        def filter_matches(text):
            return [value for value in values if text.lower() in value.lower()]
        def on_combobox_changed(event):
            text = combobox.get()
            if event.keysym in ('Up', 'Down', 'Left', 'Right', 'Return', 'Tab', 'Escape'):
                return
            matching = filter_matches(text)
            combobox['values'] = matching if text else values
        combobox.bind('<KeyRelease>', on_combobox_changed)

    autocomplete_combobox(period_dropdown, periods)
    autocomplete_combobox(gene_id_dropdown, gene_ids)
    autocomplete_combobox(gene_function_dropdown, gene_functions)
    period_dropdown.bind('<<ComboboxSelected>>', on_period_selected)
    gene_id_dropdown.bind('<<ComboboxSelected>>', on_gene_id_selected)
    gene_function_dropdown.bind('<<ComboboxSelected>>', on_function_selected)

    def search_data():
        global from_search_button
        selected_period, selected_gene_id, selected_function = update_dropdowns(
            period_string_var.get(),
            gene_id_var.get(),
            gene_function_var.get()
        )
        if not selected_gene_id or not selected_function:
            tk.messagebox.showerror("Error", "Please select both a gene and a function.")
            return
        period_index = image_periods.index(selected_period)
        period_slider.config(command=lambda v: None)
        period_slider.set(period_index + 1)
        change_image(period_index+1)
        period_slider.config(command=change_image)
        expression_data = gene_expression_data[
            (gene_expression_data['Period'] == selected_period) &
            (gene_expression_data['Gene'] == selected_gene_id) &
            (gene_expression_data['Functions'] == selected_function)
            ]
        if expression_data.empty:
            tk.messagebox.showerror("Error", "No data found for the selected criteria.")
            return
        current_search_label.config(
            text=f"Current Search:\nPeriod:{selected_period}\nGene:{selected_gene_id}\nFunction:{selected_function}")
        global plot_period,plot_gene,plot_func
        plot_period = selected_period
        plot_gene = selected_gene_id
        plot_func = selected_function
        global highlight_patch
        if isinstance(highlight_patch, list):
            for patch in highlight_patch:
                patch.remove()
            highlight_patch.clear()
        else:
            print("highlight_patch is not a list. It has type: {}".format(type(highlight_patch)))
        hide_annotations()
        global current_period, current_expression_data
        current_period = selected_period
        current_expression_data = expression_data
        period_string_var.set('')
        gene_id_var.set('')
        gene_function_var.set('')
        period_dropdown['values'] = periods
        gene_id_dropdown['values'] = gene_ids
        gene_function_dropdown['values'] = gene_functions
    search_button = ttk.Button(search_frame, text='Search', command=search_data)
    search_button.pack(side=tk.LEFT, padx=5, pady=5)
    current_search_label = tk.Label(left_frame, text="Current Search: None", font=('Helvetica', 10),justify=tk.LEFT, anchor='w',wraplength=800)
    current_search_label.pack(side=tk.TOP, anchor='nw', padx=5, pady=5)
    expression_fig, expression_ax = plt.subplots(figsize=(20, 10))
    highlight_patch=[]

    current_period = 'Germination & Establishment_phase(0-45days)'
    image_artists = {}
    for period, path in image_paths.items():
        image = plt.imread(path)
        im_artist = expression_ax.imshow(image, extent=(0, 4480, 2800, 0))
        image_artists[period] = im_artist
        im_artist.set_visible(period == current_period)
    expression_fig.tight_layout()
    expression_ax.set_axis_off()
    annotation = expression_ax.annotate("", xy=(0, 0), xytext=(20, 20), textcoords="offset points",
                                        bbox=dict(boxstyle="round", fc="w", alpha=0.5),
                                        arrowprops=dict(arrowstyle="->"))
    annotation.set_visible(False)
    normalize = Normalize(vmin=expression_min, vmax=expression_max)
    expression_canvas = FigureCanvasTkAgg(expression_fig, master=left_frame)
    expression_canvas.draw()
    expression_canvas_widget = expression_canvas.get_tk_widget()
    expression_canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=True)


    image_periods = list(image_paths.keys())
    def change_image(value):
        global current_period
        current_period = image_periods[int(value)-1]
        period_label.config(text=f'Current Period: {current_period}')
        for period, artist in image_artists.items():
            if period == current_period:
                artist.set_visible(True)
            else:
                artist.set_visible(False)
        expression_fig.canvas.draw_idle()
    period_label = tkb.Label(right_frame, text=f'Current Period: {image_periods[0]}')
    period_label.pack()
    period_int_var = tk.IntVar(value=1)
    period_slider = tk.Scale(
        right_frame,
        from_=1,
        to=len(image_periods),
        orient='horizontal',
        length=300,
        showvalue=0,
        tickinterval=1,
        label='Period',
        variable=period_int_var,
        command=change_image,
    )
    period_slider.config(bg='black', troughcolor='lightgrey', foreground='white')
    period_slider.pack(fill=tk.X)

    progress_bar_fig, progress_bar_ax = plt.subplots(figsize=(6/2, 1/2))
    cmap = plt.get_cmap('viridis')#coolwarm
    gradient = np.linspace(0, 1, 256)
    gradient = np.tile(gradient, (10, 1))
    progress_bar_ax.imshow(gradient, aspect='auto', cmap=cmap, origin='lower', extent=[0, 100, 0, 1])
    progress_bar_ax.axis('off')
    progress_bar_fig.subplots_adjust(top=0.7, bottom=0.35)
    circle_radius = 0.5
    circle = Circle((0, 0.5), radius=circle_radius, transform=progress_bar_ax.transData,
                    facecolor='lightgrey', edgecolor='lightgrey', lw=2, zorder=10)
    progress_bar_ax.add_patch(circle)
    progress_bar_ax.text(0.5, -0.4, 'Expression', va='center', ha='center', transform=progress_bar_ax.transAxes)
    progress_bar_annotation = progress_bar_ax.annotate('', xy=(0, 1), xytext=(0, 10), textcoords='offset points', ha='center', va='bottom')
    progress_bar_annotation.set_visible(True)
    progress_bar_canvas = FigureCanvasTkAgg(progress_bar_fig, master=left_frame)
    progress_bar_canvas.draw()
    progress_bar_widget = progress_bar_canvas.get_tk_widget()
    progress_bar_widget.place(relx=1.0, rely=0.0, anchor='ne')

    current_period = None
    current_expression_data = None
    def on_hover(event):
        global highlight_patch, current_period, current_expression_data
        update_required = False
        if not (event.inaxes == expression_ax and current_period and image_artists[current_period].get_visible() and current_expression_data is not None):
            return
        organs = organ_coords.get(current_period, {})
        for organ, coords_list in organs.items():
            if coords_list and isinstance(coords_list[0], tuple):
                coords_list = [coords_list]
            for coords in coords_list:
                if not isinstance(coords, list) or not all(isinstance(p, tuple) and len(p) == 2 for p in coords):
                    raise TypeError("Each 'coords' must be a list of (x, y) tuples.")
                path = Path(coords + [coords[0]])
                if path.contains_point((event.xdata, event.ydata)):
                    organ_expression_data = current_expression_data[current_expression_data['Organ'] == organ]
                    if not organ_expression_data.empty:
                        update_highlight_area(organ, organ_expression_data['Expression'].values[0], coords_list, event)
                        update_required = True
                        break
            if update_required:
                break
        if not update_required:
            hide_annotations()
        expression_fig.canvas.draw_idle()
        progress_bar_fig.canvas.draw_idle()

    def update_highlight_area(organ, expression_value, paths, event):
        global  highlight_patch
        color = cmap(normalize(expression_value))
        if highlight_patch:
            for patch in highlight_patch:
                patch.remove()
            highlight_patch.clear()

        highlight_patch = []
        for path_coords in paths:
            if path_coords[0] != path_coords[-1]:
                path_coords.append(path_coords[0])
            path = Path(path_coords)
            patch = PathPatch(path, facecolor=color, edgecolor='black', lw=0.5, alpha=0.5, zorder=2)
            expression_ax.add_patch(patch)
            highlight_patch.append(patch)
        update_annotations(organ, expression_value, event)

    def update_annotations(organ, expression_value, event):
        annotation.set_text(f"{organ}: Expression: {expression_value}")
        annotation.xy = (event.xdata, event.ydata)
        annotation.set_visible(True)
        canvas_width, canvas_height = expression_canvas.get_width_height()
        xdata, ydata = event.xdata, event.ydata
        xpix, ypix = expression_ax.transData.transform_point((xdata, ydata))
        annotation_width_pix = 200
        if (xpix + annotation_width_pix) > canvas_width:
            annotation.xytext = (-20 - annotation_width_pix, 20)
            annotation.set_horizontalalignment('right')
        else:
            annotation.xytext = (20, 20)
            annotation.set_horizontalalignment('left')
        progress_bar_annotation.set_text(f"{expression_value:.1f}")
        slider_pos = normalize(expression_value) * (progress_bar_ax.get_xlim()[1] - progress_bar_ax.get_xlim()[0])
        progress_bar_annotation.xy = (slider_pos, 0.3)
        progress_bar_annotation.set_visible(True)
        circle.set_center((slider_pos, 0.5))

    def hide_annotations():
        global highlight_patch
        annotation.set_visible(False)
        progress_bar_annotation.set_visible(False)
        circle.set_center((0, 0.5))
        if isinstance(highlight_patch, list):
            for patch in highlight_patch:
                patch.remove()
            highlight_patch.clear()
        elif isinstance(highlight_patch, matplotlib.patches.Patch):
            highlight_patch.remove()
            highlight_patch = []
        else:
            print("highlight_patch is neither a list nor a Patch. It has type: {}".format(type(highlight_patch)))
    expression_fig.canvas.mpl_connect('motion_notify_event', on_hover)

root.protocol("WM_DELETE_WINDOW",close_win)
root.mainloop()